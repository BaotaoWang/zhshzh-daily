<?xml version="1.0" encoding="UTF-8"?>
<!-- status : 指定log4j本身的打印日志的级别.ALL< Trace < DEBUG < INFO < WARN < ERROR < FATAL < OFF。
	monitorInterval : 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.
	如果需要测试是否会自动加载， 需要注意如果使用的时 eclipse 或者 idea 这种工具， 不能直接修改 src下的java源码中的log4j2.xml，
	 这样不起作用， 需要修改编译之后(idea中target/classes)的那个文件目录下的log4j2.xml -->
<Configuration status="ALL" monitorInterval="30">
    <Properties>
        <!--共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
            All:最低等级的，用于打开所有日志记录.
            Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.
            Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.
            Info:消息在粗粒度级别上突出强调应用程序的运行过程.
            Warn:输出警告及warn以下级别的日志.
            Error:输出错误信息日志.
            Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.
            OFF:最高等级的，用于关闭所有日志记录 -->
        <!-- 配置日志文件输出目录 ${sys:user.home} -->
        <Property name="LOG_HOME">D:/logs</Property>
        <property name="ERROR_LOG_FILE_NAME">${LOG_HOME}/error</property>
        <property name="WARN_LOG_FILE_NAME">${LOG_HOME}/warn</property>
        <property name="INFO_LOG_FILE_NAME">${LOG_HOME}/info</property>
        <property name="TEST_LOG_FILE_NAME">${LOG_HOME}/test</property>

        <property name="PATTERN">%d{HH:mm:ss.SSS} [%t] %-5level %class{36}.%M() : %msg%xEx%n</property>
        <!-- <property name="PATTERN">%d{HH:mm:ss.SSS} %-5level %class{36} %L %M : %msg%xEx%n</property> -->
    </Properties>

    <Appenders>
        <!--这个输出控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="Debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="${PATTERN}"/>
        </Console>

        <RollingFile name="RollingFileInfo" fileName="${INFO_LOG_FILE_NAME}/info.log"
                     filePattern="${INFO_LOG_FILE_NAME}/%d{yyyy-MM-dd-HH-mm}-info.log">
            <Filters>
                <!--设置只输出级别为info的日志 -->
                <ThresholdFilter level="info"/>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <!--<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/> -->
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。 modulate=true用来调整时间： 比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am. -->
                <!-- 关键点在于 filePattern后的日期格式，以及TimeBasedTriggeringPolicy的interval， 日期格式精确到哪一位，interval也精确到哪一个单位 -->
                <!-- log4j2的按天分日志文件 : info-%d{yyyy-MM-dd}-%i.log -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!-- SizeBasedTriggeringPolicy:Policies子节点， 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小. -->
                <!--<SizeBasedTriggeringPolicy size="100 MB" />-->
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->
            <DefaultRolloverStrategy max="3">
                <Delete basePath="${INFO_LOG_FILE_NAME}" maxDepth="2">
                    <IfFileName glob="*.log"/>
                    <!--&lt;!&ndash;!Note: 这里的age必须和filePattern协调, 后者是精确到dd, 这里就要写成xd, xD就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!&ndash;&gt;
                    &lt;!&ndash;7天&ndash;&gt;-->
                    <IfLastModified age="3m"/>
                </Delete>
                -->
            </DefaultRolloverStrategy>
        </RollingFile>

        <!-- 测试 -->
        <RollingFile name="TestRollingFile" fileName="${TEST_LOG_FILE_NAME}/app.log"
                     filePattern="${TEST_LOG_FILE_NAME}/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz">
            <PatternLayout>
                <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="5 KB"/>
            </Policies>
            <DefaultRolloverStrategy max="7"/>
        </RollingFile>

        <RollingFile name="RollingFileWarn" fileName="${WARN_LOG_FILE_NAME}/${date:yyyy-MM-dd}-warn.log"
                     filePattern="${WARN_LOG_FILE_NAME}/$${date:yyyy-MM}/%d{yyyy-MM-dd}-warn-%i.log">
            <Filters>
                <!--设置只输出级别为WARN的日志 -->
                <ThresholdFilter level="warn"/>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <!--<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/> -->
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!--设置每天打包日志一次 还可以同时使用 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!--设置日志文件满100MB后打包 -->
                <!--<SizeBasedTriggeringPolicy size="100 MB" />-->
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>
        <RollingFile name="RollingFileError" fileName="${ERROR_LOG_FILE_NAME}/${date:yyyy-MM-dd}-error.log"
                     filePattern="${ERROR_LOG_FILE_NAME}/$${date:yyyy-MM}/%d{yyyy-MM-dd}-error-%i.log">
            <Filters>
                <!--设置只输出级别为error的日志 -->
                <ThresholdFilter level="error"/>
                <!--<ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/> -->
            </Filters> <!--<ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/> -->
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!-- log4j2的按分钟 分日志文件 : warn-%d{yyyy-MM-dd-HH-mm}-%i.log 按分钟/小时/天 关键看filePattern后面配置的精 确度到什么时候%d{yyyy-MM-dd-HH-mm}到分钟按分钟分
                    %d{yyyy-MM-dd-HH}到小时按小时分 %d{yyyy-MM-dd}到天 按天分 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!--设置日志文件满100MB后打包 -->
                <!--<SizeBasedTriggeringPolicy size="100 MB" />-->
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>
    </Appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <Loggers>
        <!--过滤掉无用的DEBUG信息 -->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>
        <logger name="org.apache" level="INFO"/>
        <logger name="org.hibernate" level="INFO"/>
        <!-- 这个地方主要是为了打印mybatis的sql日志 -->
        <logger name="cn.com.zhshzh.business" level="DEBUG"/>
        <logger name="cn.com.zhshzh.system.generator.dao" level="DEBUG"/>
        <!-- 配置日志的根节点 -->
        <root level="info">
            <appender-ref ref="MyRandomAccessFile"/>
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
            <appender-ref ref="TestRollingFile"/>
            <!--<Filters>
                <LevelRangeFilter minLevel="error" maxLevel="info" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>-->
        </root>
    </Loggers>
</Configuration>
