<?xml version="1.0" encoding="UTF-8"?>
<!-- 所有的配置请参考http://logging.apache.org/log4j/2.x/ -->
<!-- status : 指定log4j本身的打印日志的级别.ALL< Trace < DEBUG < INFO < WARN < ERROR < FATAL < OFF。
	monitorInterval : 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s -->
<Configuration status="ALL" monitorInterval="30">
    <Properties>
        <!--共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
            All:最低等级的，用于打开所有日志记录.
            Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.
            Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.
            Info:消息在粗粒度级别上突出强调应用程序的运行过程.
            Warn:输出警告及warn以下级别的日志.
            Error:输出错误信息日志.
            Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.
            OFF:最高等级的，用于关闭所有日志记录 -->
        <!-- 配置日志文件输出目录 -->
        <Property name="LOG_HOME">E:/logs</Property>
        <property name="LOG_FILE_NAME_ALL">${LOG_HOME}</property>
        <property name="LOG_FILE_NAME_INFO">${LOG_HOME}/info</property>
        <property name="LOG_FILE_NAME_WARN">${LOG_HOME}/warn</property>
        <property name="LOG_FILE_NAME_ERROR">${LOG_HOME}/error</property>

        <!-- 打印完成包名 -->
        <!--<property name="PATTERN">%d{HH:mm:ss.SSS} [%t] %-5level %class{36}.%M() : %msg%xEx%n</property>-->
        <!-- 打印缩写后的包名 -->
        <property name="PATTERN">%d{HH:mm:ss.SSS} [%t] %-5level %C{1.}.%M() : %msg%xEx%n</property>
    </Properties>

    <Appenders>
        <!-- 输出到控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出Debug及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="Debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="${PATTERN}"/>
        </Console>

        <RollingRandomAccessFile name="RollingFile" fileName="${LOG_FILE_NAME_ALL}/app.log"
                                 filePattern="${LOG_FILE_NAME_ALL}/%d{yyyy-MM-dd}-app.log">
            <Filters>
                <!--设置只输出级别debug以上的日志 -->
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。 modulate=true用来调整时间： 比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am. -->
                <!-- 关键点在于 filePattern后的日期格式，以及TimeBasedTriggeringPolicy的interval， 日期格式精确到哪一位，interval也精确到哪一个单位 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->
            <DefaultRolloverStrategy max="30">
                <Delete basePath="${LOG_FILE_NAME_ALL}" maxDepth="1">
                    <IfFileName glob="*.log"/>
                    <!-- 自动删除30天前的日志文件 -->
                    <IfLastModified age="30d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>

        <RollingRandomAccessFile name="RollingFileInfo" fileName="${LOG_FILE_NAME_INFO}/info.log"
                                 filePattern="${LOG_FILE_NAME_INFO}/%d{yyyy-MM-dd}-info.log">
            <Filters>
                <!--设置只输出级别为info的日志 -->
                <ThresholdFilter level="info"/>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!-- 每天0点对info级别日志文件进行分割 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->
            <DefaultRolloverStrategy max="30">
                <Delete basePath="${LOG_FILE_NAME_INFO}" maxDepth="1">
                    <IfFileName glob="*.log"/>
                    <!-- 自动删除30天前的info级别日志文件 -->
                    <IfLastModified age="30d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>

        <RollingRandomAccessFile name="RollingFileWarn" fileName="${LOG_FILE_NAME_WARN}/warn.log"
                                 filePattern="${LOG_FILE_NAME_WARN}/%d{yyyy-MM-dd}-warn.log">
            <Filters>
                <!--设置只输出级别为WARN的日志 -->
                <ThresholdFilter level="warn"/>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!--设置每天打包日志一次 还可以同时使用 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->
            <DefaultRolloverStrategy max="30">
                <Delete basePath="${LOG_FILE_NAME_WARN}" maxDepth="1">
                    <IfFileName glob="*.log"/>
                    <!-- 自动删除30天前的warn级别日志文件 -->
                    <IfLastModified age="30d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
        <RollingRandomAccessFile name="RollingFileError" fileName="${LOG_FILE_NAME_ERROR}/error.log"
                                 filePattern="${LOG_FILE_NAME_ERROR}/%d{yyyy-MM-dd}-error.log">
            <Filters>
                <!--设置只输出级别为error的日志 -->
                <ThresholdFilter level="error"/>
            </Filters>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!-- 每天0点对error级别日志文件进行分割 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->
            <DefaultRolloverStrategy max="30">
                <Delete basePath="${LOG_FILE_NAME_ERROR}" maxDepth="1">
                    <IfFileName glob="*.log"/>
                    <!-- 自动删除30天前的error级别日志文件 -->
                    <IfLastModified age="30d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
    </Appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <Loggers>
        <!--过滤掉无用的DEBUG信息 -->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>
        <logger name="org.apache" level="INFO"/>
        <logger name="org.hibernate" level="INFO"/>
        <!-- 这个地方主要是为了打印mybatis的sql日志 -->
        <logger name="cn.com.zhshzh.business" level="DEBUG"/>
        <logger name="cn.com.zhshzh.system" level="DEBUG"/>
        <!-- 配置日志的根节点 -->
        <root level="info">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFile"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </Loggers>
</Configuration>
